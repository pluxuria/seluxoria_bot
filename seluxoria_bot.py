import asyncio
import logging
import sqlite3
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ChatPermissions
from aiogram.utils import executor
from google.cloud import vision

TOKEN = "7743549770:AAEetsOTSrVEPHnp1sNMp5K6LND4V7jtrzM"
LOG_CHAT_ID = "4755542987"
WEATHER_API_KEY = "b19646131ca413e97c6f718fa036291c"
GOOGLE_APPLICATION_CREDENTIALS = "GOOGLE_APPLICATION_CREDENTIALS"

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∏ —Ä–∞–Ω–≥–æ–≤
conn = sqlite3.connect("moderation.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    warnings INTEGER DEFAULT 0,
    role TEXT DEFAULT 'user'
)
""")
conn.commit()

# –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
ROLES = {"owner": 3, "admin": 2, "moderator": 1, "user": 0}
MOD_ACTIONS = {"mute", "warn"}
ADMIN_ACTIONS = MOD_ACTIONS | {"ban", "unban", "kick"}
OWNER_ACTIONS = ADMIN_ACTIONS | {"setrole"}

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Google Vision API
vision_client = vision.ImageAnnotatorClient()
async def is_inappropriate_image(file_path):
    with open(file_path, "rb") as image_file:
        content = image_file.read()
    image = vision.Image(content=content)
    response = vision_client.safe_search_detection(image=image)
    safe_search = response.safe_search_annotation
    if safe_search.adult >= 3 or safe_search.violence >= 3:
        return True
    return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
def get_user_role(user_id):
    cursor.execute("SELECT role FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else "user"

def has_permission(user_id, action):
    role = get_user_role(user_id)
    if action in OWNER_ACTIONS and role == "owner":
        return True
    if action in ADMIN_ACTIONS and role in {"admin", "owner"}:
        return True
    if action in MOD_ACTIONS and role in {"moderator", "admin", "owner"}:
        return True
    return False

# /help –∫–æ–º–∞–Ω–¥–∞
@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    help_text = """
    ü§ñ *–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:*
    üîπ `/mute @user time` ‚Äì –ó–∞–º—É—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
    üîπ `/warn @user` ‚Äì –í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è = –º—É—Ç)
    üîπ `/ban @user` ‚Äì –ó–∞–±–∞–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
    üîπ `/unban @user` ‚Äì –†–∞–∑–±–∞–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
    üîπ `/kick @user` ‚Äì –ò—Å–∫–ª—é—á–∏—Ç—å –∏–∑ —á–∞—Ç–∞
    üîπ `/weather –≥–æ—Ä–æ–¥` ‚Äì –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É
    üîπ `/time –≥–æ—Ä–æ–¥` ‚Äì –£–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è
    üîπ `/setrole @user —Ä–æ–ª—å` ‚Äì –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)
    üîπ –ë–æ—Ç —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç NSFW/–∂–µ—Å—Ç–æ–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç üîû
    """
    await message.reply(help_text, parse_mode="Markdown")

# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π
@dp.message_handler(commands=['setrole'])
async def set_role(message: types.Message):
    if not has_permission(message.from_user.id, "setrole"):
        return await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–µ–π!")
    try:
        target_user = message.reply_to_message.from_user.id
        role = message.text.split()[1]
        if role not in ROLES:
            return await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å! (user, moderator, admin, owner)")
        cursor.execute("INSERT OR REPLACE INTO users (user_id, role) VALUES (?, ?)", (target_user, role))
        conn.commit()
        await message.reply(f"‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {role}!")
    except:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/setrole @user —Ä–æ–ª—å`")

# –ê–≤—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
async def keep_alive():
    while True:
        await bot.send_message(LOG_CHAT_ID, "–ª—É–Ω–Ω—ã–π –∫—Ä–æ–ª–µ–∫ –≤—Å–µ–≥–¥–∞ –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º")
        await asyncio.sleep(600)

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(keep_alive())
    executor.start_polling(dp, skip_updates=True)
